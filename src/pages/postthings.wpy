<style scoped="true" lang="less">
  .input_list {
    background: #ffffff;
    box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.05);
    width: 100%;
    box-sizing: border-box;
    &.title {
      padding: 35rpx 31rpx 33rpx 30rpx;
    }
    &.type {
      margin: 29rpx 0 20rpx 0;
      padding: 35rpx 31rpx 33rpx 30rpx;
      height: 200rpx;
    }
    &.contact {
      padding: 35rpx 31rpx 33rpx 30rpx;
      height: 100rpx;
    }
    &.cansold {
      margin: 20rpx 0 0 0;
      padding: 35rpx 31rpx 33rpx 30rpx;
      height: 100rpx;
    }
  }
  .input_bar {
    width: 100%;
    box-sizing: border-box;
    font-size: 28rpx;
    background-color: #ffffff;
    text-align: left;
    .label {
      display: inline-block;
      transform: translateY(-2rpx);
    }
    &.title {
      margin-bottom: 24rpx;
      display: flex;
      align-items: center;
      input {
        width: 90%;
        height: 54rpx;
        float: right;
        margin-left: 10rpx;
      }
      label {
        line-height: 54rpx;
        vertical-align: middle;
        color: #3e3835;
      }
    }
    &.descript {
      margin-top: 21rpx;
      height: 200rpx;
      display: flex;
      justify-content: space-around;
      align-items: flex-start;
      textarea {
        padding-top: 1rpx;
        line-height: 40rpx;
        width: 90%;
        float: right;
        height: 182rpx;
      }
      .label {
        line-height: 30rpx;
        margin-right: 10rpx;
        display: inline-block;
        color: #3e3835;
        transform: translateY(2rpx);
      }
    }
    &.type {
      margin-bottom: 28rpx;
      .label {
        display: inline-block;
      }
      picker {
        width: 120rpx;
        float: right;
        color: #3e3835;
        text-align: right;
      }
    }
    &.price {
      margin-top: 24rpx;
      height: 40rpx;
      .label {
        display: inline-block;
      }
      input {
        text-align: right;
        width: 180rpx;
        height: 40rpx;
        transform: translateY(-4rpx);
        float: right;
        color: #3e3835;
      }
    }
    &.contact {
      .label {
        display: inline-block;
      }
      input {
        transform: translateY(-5rpx);
        width: 180rpx;
        text-align: right;
        height: 40rpx;
        float: right;
        color: #3e3835;
      }
    }
    &.cansold {
      .label {
        display: inline-block;
      }
      checkbox-group {
        display: inline-block;
        float: right;
      }
      checkbox {
        float: right;
        color: #3e3835;
        transform: translateY(-5rpx);
        background: #e1e1e1;
        width: 48rpx;
        height: 48rpx;
        border-radius: 100%;
      }
    }
  }
  .post_btn {
    transition: all 0.5s;
    background: #9c9c9c;
    margin-top: 28rpx;
    width: 640rpx;
    height: 75rpx;
    font-size: 28rpx;
    color: #ffffff;
    letter-spacing: 0;
    text-align: center;
    &.ok {
      background: #ff4949;
    }
  }
  .line {
    background: #ededed;
    width: 686rpx;
    height: 2rpx;
  }
  .upborad {
    display: none;
    &.open {
      display: block;
      height: 500rpx;
    }
  }
  .moreprice {
    background-color: #ffffff;
    transition: all .5s;
    display: flex;
    height: 0rpx;
    justify-content: space-between;
    align-items: center;
    width: 100%;
    box-sizing: border-box;
    padding: 0;
    overflow: hidden;
    &.open {
      height: 99rpx;
      padding: 30rpx;
    }
    .half {
      display: flex;
      justify-content: space-between;
      align-items: center;
      width: 45%;
      font-size: 28rpx;
      color: #3e3835;
      input {
        width: 80%;
        font-size: 28rpx;
      }
    }
  }
  .imagesinputbox {
    width: 100%;
    display: flex;
    justify-content: flex-start;
    align-items: center;
    flex-wrap: wrap;
    .imagebox {
      margin: 12rpx;
      width: 180rpx;
      height: 180rpx;
      position: relative;
      .boximage {
        margin: 6rpx;
        width: 180rpx;
        height: 180rpx;
      }
      .deletebtn {
        opacity: .8;
        text-align: center;
        line-height: 40rpx;
        vertical-align: middle;
        position: absolute;
        width: 40rpx;
        height: 40rpx;
        right: -20rpx;
        top: -10rpx;
        background: #ffffff;
        border-radius: 100%;
        image {
          width: 30rpx;
          height: 30rpx;
        }
      }
    }
    .uploadImage {
      margin: 12rpx;
      width: 180rpx;
      height: 180rpx;
    }
  }
</style>

<template>
  <view class="container postthings" bindinput="handleInput">
    <view class="input_list title">
      <view class="input_bar title">
        <label>标题</label>
        <input bindinput="titleInput" focus="{{true}}" confirm-hold="{{true}}" value="{{postForm.title}}" type="text" confirm-type="next" placeholder="请输入物品名称（15字以内）" />
      </view>
      <view class="line"></view>
      <view class="input_bar descript">
        <view class="label">描述</view>
        <textarea bindinput="descriptInput" maxlength="{{100}}" value="{{postForm.description}}" confirm-type="next" placeholder="描述一下你要借出的物品吧！100字以内哦。"></textarea>
      </view>
      <view class="imagesinputbox">
        <block wx:for="{{uploadImages}}">
          <view class="imagebox">
            <view data-itemindex="{{item.index}}" data-itemtype="{{item.type}}" @tap="deletetHandler" class="deletebtn">
              <image src="../images/icons/delete.svg" mode="aspectFit" />
            </view>
            <image class="boximage" mode="aspectFit" src="{{item.src}}" />
          </view>
        </block>
        <image class="uploadImage" wx:if="{{uploadImages.length !== 6}}" @tap="uploadImages" mode="aspectFit" src="../images/icons/addpic.svg" />
      </view>
    </view>
    <view class="input_list type">
      <view class="input_bar type">
        <view class="label">选择类别</view>
        <picker bindchange="typeInput" range="{{pickList}}">{{getCategory}}</picker>
      </view>
      <view class="line"></view>
      <view class="input_bar price">
        <view class="label">租金</view>
        <input bindinput="priceInput" placeholder-style="text-align:right; float:right; vertical-align:middle;line-height:40rpx" type="digit" placeholder="￥0.00" value="{{postForm.price}}" />
      </view>
    </view>
    <view class="input_list contact">
      <view class="input_bar contact">
        <view class="label">联系方式</view>
        <input value="{{postForm.contact_way}}" bindinput="contactInput" cursor-spacing="{{10}}" type="text" placeholder="未填写" />
      </view>
    </view>
    <view class="input_list cansold">
      <view class="input_bar cansold">
        <view class="label">可卖</view>
        <checkbox-group bindchange="cansoldInput">
          <checkbox checked="{{postForm.is_deal == 2}}" value="{{true}}" />
        </checkbox-group>
      </view>
    </view>
    <view class="line" wx:if="{{ifOpenMore}}"></view>
    <view class="moreprice {{ifOpenMore ? 'open' : ''}}">
      <view class="half">
        <view class="title">价格</view>
        <input value="{{postForm.sell_price}}" @input="sellPriceInput" type="digit" placeholder="￥0.00" />
      </view>
      <view class="half">
        <view class="title">原价</view>
        <input value="{{postForm.origin_price}}" @input="originPriceInput" type="digit" placeholder="￥0.00" />
      </view>
    </view>
    <button @tap.stop="postThing" disabled="{{!formOk}}" class="post_btn {{formOk ? 'ok' : ''}}">确认发布</button>
    <view class="upborad {{upborad ? 'open' : ''}}"></view>
  </view>
</template>

<script>
  import wepy from 'wepy'
  export default class PostThings extends wepy.page {
    config = {
      navigationBarTitleText: '发布租品'
    }
    components = {}
    data = {
      upborad: true,
      postForm: {
        title: '',
        description: '',
        type: 1,
        price: null,
        contact_way: '',
        category: 0,
        upload_times: 1,
        is_deal: 1,
        origin_price: undefined,
        sell_price: undefined,
        pictures: []
      },
      uploadPics: [],
      pickList: [
        '未选择',
        '电子设备',
        '书籍资料',
        '宿舍百货',
        '乐器',
        '门票卡劵',
        '美妆护肤',
        '女装',
        '男装',
        '鞋帽配饰',
        '代步工具',
        '户外运动',
        '其他'
      ]
    }
    computed = {
      uploadImages() {
        let index = -1
        let oldPics = []
        if (this.postForm.pictures) {
          oldPics = this.postForm.pictures.map((item) => {
            index++
            return {
              index: index,
              src: item,
              type: 'old'
            }
          })
        }
        index = -1
        let newPics = this.uploadPics.map((item) => {
          index++
          return {
            index: index,
            src: item,
            type: 'new'
          }
        })
        return [].concat(oldPics).concat(newPics)
      },
      getCategory() {
        return this.pickList[this.postForm.category]
      },
      ifOpenMore() {
        return this.postForm.is_deal == '2'
      },
      formOk() {
        for (let item in this.postForm) {
          let value = this.postForm[item]
          if (item == 'category' && value == '0') {
            // console.log(item, value)
            return 0
          }
          // console.log(this.postForm['is_deal'], value)
          if (this.postForm['is_deal'] == 2 && item != 'picturesSrc' && item != 'pictures') {
            if (value == undefined || value == null || value.length == 0) {
              // console.log(item, value)
              return 0
            }
          }
          if (this.postForm['is_deal'] == 1 && item != 'picturesSrc' && item != 'pictures' && (item != 'sell_price' && item != 'origin_price') && (value == undefined || value == null || value.length == 0)) {
            // console.log(item, value)
            return 0
          }
        }
        return 1
      }
    }
    clone(obj) {
      let newObj = new Object()
      for (let item in obj) {
        newObj[item] = obj[item]
      }
      return newObj
    }
    async postFormToNet(obj) {
      let self = this
      let itemId = this.itemId
      let newPics = self.uploadPics
      let codePics = [].concat(obj.pictures)
      let form = self.clone(obj)
      form.pictures = JSON.stringify(obj.pictures)
      if (!itemId) {
        form._id = 1
        form.upload_times = 1
      }
      let firstPromise = self.$parent.Request({
        url: 'commodity/pub',
        method: 'POST',
        data: form
      })
      console.log('form', form)
      let resData = await firstPromise
      console.log(resData)
      let _id = resData.data._id
      resData = await self.$parent.Request({
        method: 'POST',
        name: 'picture_file',
        data: {
          _id: _id,
          pictures: JSON.stringify(codePics)
        },
        url: 'commodity/photo'
      })
      for (let item in newPics) {
        let val = newPics[item]
        resData = await self.$parent.Upload({
          name: 'picture_file',
          formData: {
            _id: _id,
            pictures: JSON.stringify(codePics)
          },
          filePath: val,
          url: 'commodity/photo'
        })
        codePics.push(val)
      }
      return Promise.resolve(resData)
    }
    methods = {
      deletetHandler(e) {
        let index = e.currentTarget.dataset.itemindex
        let type = e.currentTarget.dataset.itemtype
        if (type === 'old') {
          this.postForm.pictures.splice(index, 1)
        } else {
          this.uploadPics.splice(index, 1)
        }
      },
      uploadImages(e) {
        let self = this
        let len = 6 - self.uploadImages.length
        console.log(len)
        wepy.chooseImage({
          count: len,
          success: (res) => {
            self.uploadPics = self.uploadPics.concat(res.tempFilePaths)
            self.$apply()
          }
        })
      },
      titleInput(e) {
        this.postForm.title = e.detail.value
      },
      descriptInput(e) {
        this.postForm.description = e.detail.value
      },
      priceInput(e) {
        this.postForm.price = e.detail.value
      },
      contactInput(e) {
        this.postForm.contact_way = e.detail.value
      },
      typeInput(e) {
        this.postForm.category = e.detail.value
      },
      cansoldInput(e) {
        this.postForm.is_deal = (e.detail.value[0] == 'true') + 1
        // console.log(this.postForm.is_deal)
      },
      sellPriceInput(e) {
        this.postForm.sell_price = e.detail.value
      },
      originPriceInput(e) {
        this.postForm.origin_price = e.detail.value
      },
      postThing(e) {
        let obj = this.postForm
        let itemId = this.itemId
        wx.showLoading({
          title: '上传中',
          mask: true
        })
        if (itemId) {
          obj._id = itemId
        }
        this.postFormToNet(obj).then((res) => {
          console.log('succee', res)
          wx.hideLoading()
          wx.showToast({
            title: '上传成功',
            icon: 'success',
            duration: 1000,
            complete: () => {
              wx.navigateBack()
            }
          })
        }, (rej) => {
          wx.hideLoading()
          wx.showToast({
            title: '上传失败，请重试',
            icon: 'fail',
            duration: 1000
          })
          console.log('fail', rej)
        })
      }
    }
    events = {}
    getInfo(itemId) {
      let token = this.$parent.globalData.code
      let self = this
      this.$parent.Request({
        url: 'commodity/detail',
        data: {
          _id: itemId
        }
      }, token).then((res) => {
        self.postForm = res.data
        self.$apply()
      })
    }
    onLoad(options) {
      let itemId = options.id
      let self = this
      wx.reportAnalytics('pub_thing', {})
      self.uploadPics = []
      if (itemId) {
        self.itemId = itemId
        self.getInfo(itemId)
      }
      let userInfo = self.$parent.globalData.userInfo
      if (userInfo) {
        self.contact_way = userInfo.contact_way
      }
      self.$apply()
    }
    onShow() {
      wx.reportAnalytics('pub_thing', {})
    }
  }
</script>
